{"version":3,"file":"923.js","mappings":"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","sources":["webpack://fall-in-asia-clinet/./components/Editor/Editor.tsx","webpack://fall-in-asia-clinet/./components/Maps/CountrySelectMap.tsx","webpack://fall-in-asia-clinet/./hooks/useInput.ts"],"sourcesContent":["import styled from \"@emotion/styled\";\r\nimport { imageHandler, quillSetting } from \"config\";\r\nimport React, { FC, useEffect, useRef } from \"react\";\r\nimport { memo } from \"react\";\r\n\r\nconst EditorWrapper = styled.div`\r\n  .ql-editor {\r\n    padding: 1rem;\r\n    img {\r\n      width: 50%;\r\n    }\r\n  }\r\n`;\r\n\r\ninterface IProps {\r\n  setContent: (value: string) => void;\r\n  prevContent?: string;\r\n  isStory?: boolean;\r\n}\r\n\r\nconst Editor: FC<IProps> = ({ setContent, prevContent, isStory }) => {\r\n  const Quill = typeof window == \"object\" ? require(\"quill\") : () => false;\r\n  const quillElement = useRef<any>(null);\r\n  const quillInstance = useRef<any>(null);\r\n\r\n  useEffect(() => {\r\n    if (quillElement?.current) {\r\n      quillInstance.current = new Quill(quillElement?.current, quillSetting(false));\r\n    }\r\n\r\n    const quill = quillInstance?.current;\r\n\r\n    if (prevContent) {\r\n      quill.root.innerHTML = prevContent;\r\n    }\r\n    quill?.on(\"text-change\", () => {\r\n      onChangeEditor(quill?.root.innerHTML);\r\n    });\r\n\r\n    const toolbar = quill?.getModule(\"toolbar\");\r\n    toolbar.addHandler(\"image\", () => imageHandler(quillInstance, isStory));\r\n  }, []);\r\n\r\n  const onChangeEditor = (content: string) => {\r\n    setContent(content);\r\n  };\r\n\r\n  return (\r\n    <EditorWrapper>\r\n      <div style={{ height: \"70vh\" }} ref={quillElement} />\r\n    </EditorWrapper>\r\n  );\r\n};\r\n\r\nexport default memo(Editor);\r\n","import React, { FC, memo, useCallback, useRef, useState } from \"react\";\r\nimport ReactMapGL, { Marker, FlyToInterpolator, Source, Layer, MapRef } from \"react-map-gl\";\r\nimport Pin from \"./Pin\";\r\n//@ts-ignore\r\nimport Geocoder from \"react-map-gl-geocoder\";\r\nimport { ICoordinate } from \"@typings/db\";\r\n\r\ninterface IProps {\r\n  setRegion: (value: string) => void;\r\n  marker: ICoordinate;\r\n  setMarker: (coordinate: ICoordinate) => void;\r\n  lat: number | undefined;\r\n  lng: number | undefined;\r\n}\r\n\r\nconst CountrySelectMap: FC<IProps> = ({ setRegion, marker, setMarker, lat, lng }) => {\r\n  const mapRef = useRef<MapRef>(null);\r\n  const [viewport, setViewport] = useState({\r\n    width: \"100%\",\r\n    height: 500,\r\n    latitude: lat || 37.50529626491968,\r\n    longitude: lng || 126.98047832475031,\r\n    zoom: 8,\r\n  });\r\n\r\n  const handleViewportChange = useCallback((newViewport) => setViewport(newViewport), []);\r\n\r\n  const handleGeocoderViewportChange = useCallback(\r\n    (newViewport) => {\r\n      const geocoderDefaultOverrides = { transitionDuration: 1000 };\r\n      setMarker(newViewport);\r\n      return handleViewportChange({\r\n        width: \"100%\",\r\n        height: 500,\r\n        ...newViewport,\r\n        ...geocoderDefaultOverrides,\r\n      });\r\n    },\r\n    [handleViewportChange]\r\n  );\r\n\r\n  return (\r\n    <ReactMapGL\r\n      className=\"map-gl\"\r\n      ref={mapRef}\r\n      {...viewport}\r\n      mapboxApiAccessToken={process.env.NEXT_PUBLIC_MAPBOX_API_KEY}\r\n      onViewportChange={handleViewportChange}\r\n      mapStyle=\"mapbox://sprites/mapbox/basic-v8\"\r\n      asyncRender={true}\r\n      transitionInterpolator={new FlyToInterpolator()}\r\n    >\r\n      <Geocoder\r\n        marker={false}\r\n        mapRef={mapRef}\r\n        onViewportChange={handleGeocoderViewportChange}\r\n        mapboxApiAccessToken={process.env.NEXT_PUBLIC_MAPBOX_API_KEY}\r\n        position=\"top-left\"\r\n        onResult={(e: any) => {\r\n          const geocoderDefaultOverrides = { transitionDuration: 1000 };\r\n          setRegion(e.result.place_name);\r\n          handleViewportChange({\r\n            width: \"100%\",\r\n            height: 500,\r\n            zoom: 9.3,\r\n            latitude: e.result.center[1],\r\n            longitude: e.result.center[0],\r\n            ...geocoderDefaultOverrides,\r\n          });\r\n        }}\r\n      />\r\n      <Marker\r\n        longitude={marker.longitude}\r\n        latitude={marker.latitude}\r\n        offsetTop={-20}\r\n        offsetLeft={-10}\r\n      >\r\n        <Pin size={20} />\r\n      </Marker>\r\n    </ReactMapGL>\r\n  );\r\n};\r\n\r\nexport default memo(CountrySelectMap);\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport default function useInput<T>(initialValue: T): any {\r\n  const [Value, setValue] = useState(initialValue);\r\n  const handler = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setValue((e.target as any).value);\r\n  }, []);\r\n  return [Value, handler, setValue];\r\n}\r\n"],"names":["imageHandler","quillSetting","React","useEffect","useRef","memo","EditorWrapper","Editor","setContent","prevContent","isStory","Quill","require","quillElement","quillInstance","current","quill","root","innerHTML","on","onChangeEditor","toolbar","getModule","addHandler","content","height","useCallback","useState","ReactMapGL","Marker","FlyToInterpolator","Pin","Geocoder","CountrySelectMap","setRegion","marker","setMarker","lat","lng","mapRef","viewport","setViewport","width","latitude","longitude","zoom","handleViewportChange","newViewport","handleGeocoderViewportChange","geocoderDefaultOverrides","transitionDuration","process","env","NEXT_PUBLIC_MAPBOX_API_KEY","e","result","place_name","center","useInput","initialValue","Value","setValue","handler","target","value"],"sourceRoot":""}