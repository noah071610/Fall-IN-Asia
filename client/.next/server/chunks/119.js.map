{"version":3,"file":"119.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAMS,uBAAuB,GAAG,CAACC,IAAD,EAAeC,GAAf,kBAA+BH,mDAA/B,4OAc5BD,4DAAU,CAACI,GAAD,EAAO,UAASD,IAAK,OAArB,CAdkB,yCAAhC;;AAuBA,MAAME,gBAA4B,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWH,EAAAA,IAAX;AAAiBC,EAAAA,GAAjB;AAAsBG,EAAAA;AAAtB,CAAD,KAAqC;AAAA;;AACxE,QAAM;AAAA,OAACC,aAAD;AAAA,OAAgBC;AAAhB,MAAoCb,+CAAQ,CAAC,IAAD,CAAlD;AACA,QAAMc,GAAG,GAAGb,6CAAM,CAAC,IAAD,CAAlB;AACA,QAAMc,SAAS,GAAGb,oEAAW,CAACY,GAAD,CAA7B;AACA,QAAME,OAAO,GAAG,CAAAN,OAAO,SAAP,IAAAA,OAAO,WAAP,yBAAAA,OAAO,CAAG,CAAH,CAAP,wDAAcO,MAAd,MAAyB,CAAzC;AAEAlB,EAAAA,gDAAS,CAAC,MAAM;AACd,QAAIW,OAAJ,EAAa;AAAA;;AACXG,MAAAA,gBAAgB,CAAC,aAAAH,OAAO,CAACA,OAAO,CAACO,MAAR,GAAiB,CAAlB,CAAP,sDAA6BA,MAA7B,IAAsC,EAAvC,CAAhB;AACD;AACF,GAJQ,EAIN,CAACP,OAAD,CAJM,CAAT;AAKAX,EAAAA,gDAAS,CAAC,MAAM;AACd,QAAIgB,SAAS,IAAI,CAACH,aAAd,IAA+B,CAACI,OAApC,EAA6C;AAC3CL,MAAAA,OAAO,CAAEO,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAP,CAA4BC,IAA5B,CAAiC,MAAM,CAAE,CAAzC;AACD;AACF,GAJQ,EAIN,CAACJ,SAAD,CAJM,CAAT;AAMA,QAAMK,WAAW,GAAGV,OAAO,GAAGA,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEW,IAAT,EAAH,GAAqB,EAAhD;AAEA,SACE;AAAA,eACE;AAAK,SAAG,EAAEf,uBAAuB,CAACC,IAAD,EAAOC,GAAP,CAAjC;AAAA,iBACE;AAAM,UAAE,EAAC,cAAT;AAAwB,iBAAS,EAAC;AAAlC,QADF,EAEGY,WAFH,aAEGA,WAFH,uBAEGA,WAAW,CAAEE,GAAb,CAAiB,CAACC,CAAD,EAAYC,CAAZ,KAAkB;AAClC,eAAO,4DAAC,iFAAD;AAA2B,eAAK,EAAED;AAAlC,WAAwBC,CAAxB,CAAP;AACD,OAFA,CAFH;AAAA,MADF,EAOE;AAAK,SAAG,EAAEV;AAAV,MAPF;AAAA,IADF;AAWD,CA9BD;;AAgCA,8EAAehB,2CAAI,CAACW,gBAAD,CAAnB","sources":["webpack://fall-in-asia-clinet/./sections/StoryPage/StoryArticleList.tsx"],"sourcesContent":["import { IStory } from \"@typings/db\";\r\nimport React, { FC, memo, useCallback, useEffect, useState } from \"react\";\r\nimport { useRef } from \"react\";\r\nimport useOnScreen from \"@hooks/useOnScreen\";\r\nimport ArticleColumnCard from \"@components/Cards/ArticleColumnCard\";\r\nimport { GRID_STYLE, SM_SIZE } from \"config\";\r\nimport tw from \"twin.macro\";\r\nimport { css } from \"@emotion/react\";\r\nconst StoryArticleListWrapper = (grid: number, gap: string) => css`\r\n  @media (max-width: 1000px) {\r\n    grid-template-columns: repeat(3, 1fr);\r\n    gap: 0.5rem;\r\n  }\r\n  @media (max-width: 750px) {\r\n    grid-template-columns: repeat(2, 1fr);\r\n    gap: 0.5rem;\r\n  }\r\n  @media (max-width: 460px) {\r\n    display: block;\r\n  }\r\n  ${tw`relative`}\r\n  transition:0.3s all;\r\n  ${GRID_STYLE(gap, `repeat(${grid},1fr)`)};\r\n`;\r\ninterface IProps {\r\n  stories: IStory[][] | undefined;\r\n  setSize: (f: (size: number) => number) => Promise<IStory[][] | undefined>;\r\n  grid: number;\r\n  gap: string;\r\n}\r\n\r\nconst StoryArticleList: FC<IProps> = ({ stories, grid, gap, setSize }) => {\r\n  const [isReachingEnd, setIsReachingEnd] = useState(true);\r\n  const ref = useRef(null);\r\n  const isVisible = useOnScreen(ref);\r\n  const isEmpty = stories?.[0]?.length === 0;\r\n\r\n  useEffect(() => {\r\n    if (stories) {\r\n      setIsReachingEnd(stories[stories.length - 1]?.length < 10);\r\n    }\r\n  }, [stories]);\r\n  useEffect(() => {\r\n    if (isVisible && !isReachingEnd && !isEmpty) {\r\n      setSize((prev) => prev + 1).then(() => {});\r\n    }\r\n  }, [isVisible]);\r\n\r\n  const storiesData = stories ? stories?.flat() : [];\r\n\r\n  return (\r\n    <>\r\n      <div css={StoryArticleListWrapper(grid, gap)}>\r\n        <span id=\"article_list\" className=\"anchor-offset-controller\" />\r\n        {storiesData?.map((v: IStory, i) => {\r\n          return <ArticleColumnCard key={i} story={v} />;\r\n        })}\r\n      </div>\r\n      <div ref={ref} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(StoryArticleList);\r\n"],"names":["React","memo","useEffect","useState","useRef","useOnScreen","ArticleColumnCard","GRID_STYLE","css","StoryArticleListWrapper","grid","gap","StoryArticleList","stories","setSize","isReachingEnd","setIsReachingEnd","ref","isVisible","isEmpty","length","prev","then","storiesData","flat","map","v","i"],"sourceRoot":""}