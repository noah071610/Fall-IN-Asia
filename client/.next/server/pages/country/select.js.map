{"version":3,"file":"../pages/country/select.js","mappings":"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","sources":["webpack://fall-in-asia-clinet/./components/AutoCompleteForm.tsx","webpack://fall-in-asia-clinet/./pages/country/select.tsx","webpack://fall-in-asia-clinet/external \"@emotion/react\"","webpack://fall-in-asia-clinet/external \"@emotion/react/jsx-runtime\"","webpack://fall-in-asia-clinet/external \"@emotion/styled/base\"","webpack://fall-in-asia-clinet/external \"@reduxjs/toolkit\"","webpack://fall-in-asia-clinet/external \"antd\"","webpack://fall-in-asia-clinet/external \"axios\"","webpack://fall-in-asia-clinet/external \"next-redux-wrapper\"","webpack://fall-in-asia-clinet/external \"next/router\"","webpack://fall-in-asia-clinet/external \"react\"","webpack://fall-in-asia-clinet/external \"react-toastify\"","webpack://fall-in-asia-clinet/external \"swiper/core\"","webpack://fall-in-asia-clinet/external \"swiper/react\"","webpack://fall-in-asia-clinet/external \"swr\""],"sourcesContent":["import React, { FC, useMemo } from \"react\";\r\nimport { AutoComplete } from \"antd\";\r\nimport { useCallback } from \"react\";\r\nimport { memo } from \"react\";\r\n\r\ninterface IProps {\r\n  countryOptions: { value: string; code: string }[] | undefined;\r\n  selectedCountry: string;\r\n  setCountry: (value: string) => void;\r\n  disabled?: boolean;\r\n}\r\n\r\nconst AutoCompleteForm: FC<IProps> = ({\r\n  countryOptions,\r\n  selectedCountry,\r\n  setCountry,\r\n  disabled,\r\n}) => {\r\n  const onChangeCountry = useCallback((value: string) => {\r\n    setCountry(value);\r\n  }, []);\r\n  return (\r\n    <AutoComplete\r\n      allowClear={true}\r\n      disabled={disabled}\r\n      className=\"autoComplete-form\"\r\n      options={\r\n        selectedCountry !== \"\"\r\n          ? countryOptions\r\n          : countryOptions?.slice(0, 8).concat([{ value: \"...\", code: \"\" }])\r\n      }\r\n      value={selectedCountry}\r\n      onChange={onChangeCountry}\r\n      placeholder=\"국가검색\"\r\n      filterOption={(inputValue, option) =>\r\n        option!.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default memo(AutoCompleteForm);\r\n","import React, { FC, useCallback, useMemo, useState } from \"react\";\r\nimport AutoCompleteForm from \"@components/AutoCompleteForm\";\r\nimport CountryList from \"@components/CountryPreviewSlide\";\r\nimport useSWR from \"swr\";\r\nimport fetcher from \"utils/fetcher\";\r\nimport { FLEX_STYLE, noRevalidate, toastErrorMessage } from \"config\";\r\nimport { ICountry } from \"@typings/db\";\r\nimport styled from \"@emotion/styled\";\r\nimport router from \"next/router\";\r\nimport LGLayout from \"@layout/LGLayout\";\r\nimport { wrapper } from \"configureStore\";\r\nimport axios from \"axios\";\r\nimport { getUserInfoAction } from \"actions/user\";\r\nimport MainCountryAllview from \"@components/CountryAllview\";\r\nimport tw from \"twin.macro\";\r\n\r\nconst GobackBtn = styled.div`\r\n  ${FLEX_STYLE(\"flex-end\", \"center\")};\r\n  margin-bottom: 2rem;\r\n  button {\r\n    ${tw`bg-white w-28 rounded-xl px-4 py-2 hover:shadow-md`}\r\n  }\r\n`;\r\n\r\nconst AutoCompleteWrapper = styled.div`\r\n  ${tw`bg-white flex p-2 rounded-2xl`}\r\n  .search-bar {\r\n    width: 100%;\r\n  }\r\n  .autoComplete-form {\r\n    width: 100%;\r\n    .ant-select-selector {\r\n      border: none;\r\n      &:focus {\r\n        border: none !important;\r\n      }\r\n      &:hover {\r\n        border: none !important;\r\n      }\r\n    }\r\n  }\r\n  .search-btn {\r\n    ${tw`w-20 ml-4 rounded-xl cursor-pointer bg-gray-100 hover:bg-gray-300`}\r\n  }\r\n`;\r\n\r\ninterface IProps {\r\n  initialCountries: ICountry[];\r\n}\r\n\r\nconst select: FC<IProps> = ({ initialCountries }) => {\r\n  const { data: countries } = useSWR<ICountry[]>(\"/country\", fetcher, {\r\n    initialData: initialCountries,\r\n    ...noRevalidate,\r\n  });\r\n  const [selectedCountry, setCountry] = useState(\"\");\r\n  const countryOptions = useMemo(\r\n    () =>\r\n      countries?.map((v, i) => {\r\n        return { value: v.name, code: v.code };\r\n      }),\r\n    [countries]\r\n  );\r\n  const onClickGotoCountryPage = useCallback(() => {\r\n    let pickCountry = countryOptions?.find((v) => v.value === selectedCountry);\r\n    if (pickCountry) {\r\n      router.push(`/country/${pickCountry.code}`);\r\n    } else {\r\n      toastErrorMessage(\"유효하지 않은 국가입니다. 다시 확인해주세요.\");\r\n      return;\r\n    }\r\n  }, [selectedCountry, countryOptions]);\r\n  return (\r\n    <LGLayout>\r\n      <GobackBtn>\r\n        <button onClick={() => router.back()}>뒤로가기</button>\r\n      </GobackBtn>\r\n      <h2 className=\"main-title\">인기여행지</h2>\r\n      <CountryList isMain={true} slidesPerView={4.7} />\r\n      <h2 className=\"main-title\">국가선택</h2>\r\n      <AutoCompleteWrapper>\r\n        <div className=\"search-bar\">\r\n          <AutoCompleteForm\r\n            countryOptions={countryOptions}\r\n            selectedCountry={selectedCountry}\r\n            setCountry={setCountry}\r\n          />\r\n        </div>\r\n        <button className=\"search-btn\" onClick={onClickGotoCountryPage}>\r\n          이동\r\n        </button>\r\n      </AutoCompleteWrapper>\r\n      <MainCountryAllview isMain={true} countries={countries} />\r\n    </LGLayout>\r\n  );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps((store) => async ({ req, res }) => {\r\n  const cookie = req ? req.headers.cookie : \"\";\r\n  axios.defaults.headers.Cookie = \"\";\r\n  if (req && cookie) {\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  await store.dispatch(getUserInfoAction());\r\n  const initialCountries = await fetcher(`/country`);\r\n  return {\r\n    props: { initialCountries },\r\n  };\r\n});\r\n\r\nexport default select;\r\n","module.exports = require(\"@emotion/react\");","module.exports = require(\"@emotion/react/jsx-runtime\");","module.exports = require(\"@emotion/styled/base\");","module.exports = require(\"@reduxjs/toolkit\");","module.exports = require(\"antd\");","module.exports = require(\"axios\");","module.exports = require(\"next-redux-wrapper\");","module.exports = require(\"next/router\");","module.exports = require(\"react\");","module.exports = require(\"react-toastify\");","module.exports = require(\"swiper/core\");","module.exports = require(\"swiper/react\");","module.exports = require(\"swr\");"],"names":["React","AutoComplete","useCallback","memo","AutoCompleteForm","countryOptions","selectedCountry","setCountry","disabled","onChangeCountry","value","slice","concat","code","inputValue","option","toUpperCase","indexOf","useMemo","useState","CountryList","useSWR","fetcher","FLEX_STYLE","noRevalidate","toastErrorMessage","router","LGLayout","wrapper","axios","getUserInfoAction","MainCountryAllview","GobackBtn","AutoCompleteWrapper","select","initialCountries","data","countries","initialData","map","v","i","name","onClickGotoCountryPage","pickCountry","find","push","back","getServerSideProps","store","req","res","cookie","headers","defaults","Cookie","dispatch","props"],"sourceRoot":""}