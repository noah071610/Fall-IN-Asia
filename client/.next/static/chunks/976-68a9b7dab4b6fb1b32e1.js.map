{"version":3,"file":"static/chunks/976-68a9b7dab4b6fb1b32e1.js","mappings":"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","sources":["webpack://_N_E/./components/Comments/CommentForm/styles.tsx","webpack://_N_E/./components/Comments/CommentForm/index.tsx","webpack://_N_E/./components/Comments/Comment/styles.tsx","webpack://_N_E/./components/Comments/SubComment/styles.tsx","webpack://_N_E/./components/Comments/SubComment/index.tsx","webpack://_N_E/./components/Comments/SubCommentForm/styles.tsx","webpack://_N_E/./components/Comments/SubCommentForm/index.tsx","webpack://_N_E/./components/Comments/Comment/index.tsx","webpack://_N_E/./hooks/useToggle.ts"],"sourcesContent":["import styled from \"@emotion/styled\";\r\nimport { FLEX_STYLE } from \"config\";\r\nimport tw from \"twin.macro\";\r\n\r\nexport const CommentFormWrapper = styled.div`\r\n  ${tw`py-4`}\r\n  .comment-form-main {\r\n    ${tw`rounded-2xl bg-gray-100 p-2`}\r\n    transition:0.25s all;\r\n  }\r\n  .comment-input {\r\n    display: flex;\r\n    .icon {\r\n      margin-right: 0.7rem;\r\n      img {\r\n        ${tw`w-10 h-10 rounded-full`}\r\n      }\r\n    }\r\n    textarea {\r\n      cursor: pointer;\r\n      &:focus {\r\n        cursor: inherit;\r\n      }\r\n    }\r\n  }\r\n  .comment-submit-wrapper {\r\n    overflow: hidden;\r\n    div {\r\n      ${FLEX_STYLE(\"flex-end\", \"center\")};\r\n      button {\r\n        ${tw`rounded-md py-2 px-3 hover:bg-gray-100`}\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { FC, useCallback, useEffect, useState } from \"react\";\r\nimport { CommentFormWrapper } from \"./styles\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"slices\";\r\nimport { DEFAULT_ICON_URL, toastErrorMessage, toastSuccessMessage, WHITE_COLOR } from \"config\";\r\nimport TextareaAutosize from \"react-textarea-autosize\";\r\nimport useInput from \"@hooks/useInput\";\r\nimport { useRouter } from \"next/router\";\r\nimport { memo } from \"react\";\r\nimport { mainSlice } from \"slices/main\";\r\nimport axios from \"axios\";\r\n\r\ninterface IProps {\r\n  isStory: boolean;\r\n  revalidateComments: () => Promise<boolean>;\r\n}\r\n\r\nconst CommentForm: FC<IProps> = ({ isStory, revalidateComments }) => {\r\n  const dispatch = useDispatch();\r\n  const { query } = useRouter();\r\n  const { user } = useSelector((state: RootState) => state.user);\r\n  const [content, onChangeContent, setContent] = useInput(\"\");\r\n  const [onCommentForm, setOnCommentForm] = useState(false);\r\n\r\n  const onSubmitComment = useCallback(() => {\r\n    if (content === \"\" || !content?.trim()) {\r\n      toastErrorMessage(\"댓글을 입력해주세요.\");\r\n      return;\r\n    }\r\n    if (!user) {\r\n      toastErrorMessage(\"로그인이 필요합니다.\");\r\n      return;\r\n    }\r\n    let form: { [key: string]: any; content: string } = {\r\n      content,\r\n    };\r\n    if (isStory) {\r\n      form[\"storyId\"] = parseInt(query?.storyId as string);\r\n    } else {\r\n      form[\"momentId\"] = parseInt(query?.momentId as string);\r\n    }\r\n    axios\r\n      .post(\"/comment\", form, { withCredentials: true })\r\n      .then(() => {\r\n        revalidateComments();\r\n        toastSuccessMessage(\"댓글을 성공적으로 작성했습니다.\");\r\n        setContent(\"\");\r\n      })\r\n      .catch((error) => {\r\n        toastSuccessMessage(error);\r\n        throw error;\r\n      });\r\n  }, [content, query, user, isStory]);\r\n\r\n  const onClickCommentCancle = useCallback(() => {\r\n    setOnCommentForm(false);\r\n    setContent(\"\");\r\n  }, []);\r\n\r\n  const onClickCommentForm = useCallback(() => {\r\n    if (!user) {\r\n      toastErrorMessage(\"로그인이 필요합니다.\");\r\n      dispatch(mainSlice.actions.toggleLoginModal());\r\n      return;\r\n    }\r\n    setOnCommentForm(true);\r\n  }, [user]);\r\n  return (\r\n    <CommentFormWrapper>\r\n      <div\r\n        style={\r\n          onCommentForm\r\n            ? { background: WHITE_COLOR, boxShadow: \"0px 0px 5px rgba(0,0,0,0.15)\" }\r\n            : {}\r\n        }\r\n        className=\"comment-form-main\"\r\n      >\r\n        <div\r\n          style={onCommentForm ? { marginBottom: \".5rem\" } : {}}\r\n          onClick={onClickCommentForm}\r\n          className=\"comment-input\"\r\n        >\r\n          <div className=\"icon\">\r\n            <img src={user ? user.icon : DEFAULT_ICON_URL} alt=\"user-icon\" />\r\n          </div>\r\n          <TextareaAutosize\r\n            placeholder={user ? \"댓글 작성하기.\" : \"로그인이 필요합니다.\"}\r\n            disabled={user ? false : true}\r\n            value={content}\r\n            onChange={onChangeContent}\r\n          />\r\n        </div>\r\n        <div className=\"comment-submit-wrapper\">\r\n          <div className={onCommentForm ? \"drop-down\" : \"roll-up\"}>\r\n            <button onClick={onSubmitComment}>코멘트</button>\r\n            <button onClick={onClickCommentCancle}>취소</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </CommentFormWrapper>\r\n  );\r\n};\r\n\r\nexport default memo(CommentForm);\r\n","import styled from \"@emotion/styled\";\r\nimport { BLUE_COLOR, FLEX_STYLE, RED_COLOR } from \"config\";\r\nimport tw from \"twin.macro\";\r\n\r\nexport const CommentWrapper = styled.div`\r\n  ${tw`py-4`}\r\n  .comment-main {\r\n    ${tw`cursor-pointer pr-8 pl-2 relative`}\r\n    transition: 0.3s all;\r\n    .btn-wrapper {\r\n      ${tw`absolute right-0 `}\r\n      top:0.25rem;\r\n      a {\r\n        ${tw`rounded-full px-2 py-1 hover:bg-gray-100`}\r\n        .count {\r\n          padding-left: 0.25rem;\r\n        }\r\n      }\r\n      .liked {\r\n        .anticon {\r\n          color: ${RED_COLOR};\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .more-subComment {\r\n    ${tw`cursor-pointer`}\r\n    padding: 1rem 0.5rem 0 3.7rem;\r\n    ${FLEX_STYLE(\"flex-start\", \"center\")};\r\n    .count {\r\n      ${tw`text-sm mr-1 font-bold `}\r\n      color: ${BLUE_COLOR};\r\n    }\r\n    .more-subComment-btn {\r\n      ${tw`text-sm p-0`}\r\n      .anticon {\r\n        font-size: 0.9rem;\r\n        margin-left: 0.5rem;\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import styled from \"@emotion/styled\";\r\nimport { BORDER_THIN, FLEX_STYLE, GRAY_COLOR, RED_COLOR, RGB_BLACK } from \"config\";\r\n\r\nexport const SubCommentWrapper = styled.div`\r\n  padding: 1rem 2rem 1rem 3.7rem;\r\n  position: relative;\r\n  .delete-btn {\r\n    position: absolute;\r\n    top: 0.5rem;\r\n    right: 0;\r\n    border-radius: 50%;\r\n    padding: 0.5rem;\r\n    &:hover {\r\n      background: ${GRAY_COLOR};\r\n    }\r\n  }\r\n  .icon {\r\n    img {\r\n      width: 2rem;\r\n      height: 2rem;\r\n    }\r\n  }\r\n`;\r\n","import React, { FC, useCallback, useEffect, useState } from \"react\";\r\nimport { SubCommentWrapper } from \"./styles\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"slices\";\r\nimport { ISubComment } from \"@typings/db\";\r\nimport NameSpace from \"@components/NameSpace\";\r\nimport { memo } from \"react\";\r\nimport { toastConfirmMessage } from \"@components/ConfirmToastify\";\r\nimport axios from \"axios\";\r\nimport { toastErrorMessage, toastSuccessMessage } from \"config\";\r\ninterface IProps {\r\n  subComment: ISubComment;\r\n  revalidateComments: () => void;\r\n}\r\n\r\nconst SubComment: FC<IProps> = ({ subComment, revalidateComments }) => {\r\n  const { user } = useSelector((state: RootState) => state.user);\r\n  const [isOwner, setIsOwner] = useState(false);\r\n  useEffect(() => {\r\n    if (user?.id === subComment?.user.id) {\r\n      setIsOwner(true);\r\n    }\r\n  }, [user, subComment]);\r\n\r\n  const onClickConfirmDelete = useCallback(() => {\r\n    if (user && isOwner) {\r\n      axios\r\n        .delete(`/comment/subComment/${subComment?.id}`)\r\n        .then(() => {\r\n          revalidateComments();\r\n          toastSuccessMessage(\"답글을 성공적으로 삭제했습니다.\");\r\n        })\r\n        .catch((error) => {\r\n          toastErrorMessage(error);\r\n          throw error;\r\n        });\r\n    }\r\n  }, [user, isOwner, subComment]);\r\n\r\n  return (\r\n    <SubCommentWrapper>\r\n      <NameSpace\r\n        user={subComment?.user}\r\n        date={subComment?.createdAt}\r\n        comment={subComment?.content}\r\n      />\r\n      {isOwner && (\r\n        <a\r\n          className=\"delete-btn\"\r\n          onClick={() => {\r\n            toastConfirmMessage(onClickConfirmDelete, \"이 답글을 삭제할까요?\", \"삭제해주세요.\");\r\n          }}\r\n        >\r\n          <DeleteOutlined />\r\n        </a>\r\n      )}\r\n    </SubCommentWrapper>\r\n  );\r\n};\r\n\r\nexport default memo(SubComment);\r\n","import styled from \"@emotion/styled\";\r\nimport { FLEX_STYLE } from \"config\";\r\nimport tw from \"twin.macro\";\r\n\r\nexport const SubCommentFormWrapper = styled.div`\r\n  padding: 1rem 0 0 3.7rem;\r\n  transition: 0.3s all;\r\n  ${FLEX_STYLE(\"flex-start\", \"center\")};\r\n  .icon {\r\n    img {\r\n      ${tw`w-8 rounded-full mr-2`}\r\n    }\r\n  }\r\n  button {\r\n    ${tw`w-24 py-2 px-3 bg-gray-100 rounded-md ml-2 hover:bg-gray-300`}\r\n  }\r\n`;\r\n","import React, { FC, useCallback } from \"react\";\r\nimport { SubCommentFormWrapper } from \"./styles\";\r\nimport useInput from \"@hooks/useInput\";\r\nimport { DEFAULT_ICON_URL, toastErrorMessage, toastSuccessMessage } from \"config\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"slices\";\r\nimport { memo } from \"react\";\r\nimport axios from \"axios\";\r\n\r\ninterface IProps {\r\n  commentId: number;\r\n  revalidateComments: () => void;\r\n}\r\n\r\nconst SubCommentForm: FC<IProps> = ({ commentId, revalidateComments }) => {\r\n  const [content, onChangeContent, setContent] = useInput(\"\");\r\n  const { user } = useSelector((state: RootState) => state.user);\r\n  const onSubmitSubComment = useCallback(() => {\r\n    if (content === \"\" || !content?.trim()) {\r\n      toastErrorMessage(\"내용을 적어주세요\");\r\n      return;\r\n    }\r\n    if (!user) {\r\n      toastErrorMessage(\"로그인이 필요합니다.\");\r\n      return;\r\n    }\r\n    let form = {\r\n      content,\r\n      commentId,\r\n    };\r\n    axios\r\n      .post(\"/comment/subComment\", form)\r\n      .then(() => {\r\n        revalidateComments();\r\n        toastSuccessMessage(\"답글을 성공적으로 작성했습니다.\");\r\n        setContent(\"\");\r\n      })\r\n      .catch((error) => {\r\n        toastSuccessMessage(error);\r\n        throw error;\r\n      });\r\n  }, [commentId, content]);\r\n  return (\r\n    <SubCommentFormWrapper>\r\n      <div className=\"icon\">\r\n        {user ? (\r\n          <img src={user.icon} alt=\"user_icon\" />\r\n        ) : (\r\n          <img src={DEFAULT_ICON_URL} alt=\"user_icon\" />\r\n        )}\r\n      </div>\r\n      <input\r\n        placeholder={user ? \"답글 작성하기.\" : \"로그인이 필요합니다.\"}\r\n        value={content}\r\n        onChange={onChangeContent}\r\n      />\r\n      <button disabled={user ? false : true} onClick={onSubmitSubComment}>\r\n        답장\r\n      </button>\r\n    </SubCommentFormWrapper>\r\n  );\r\n};\r\n\r\nexport default memo(SubCommentForm);\r\n","import React, { FC, memo, useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { CommentWrapper } from \"./styles\";\r\nimport {\r\n  DeleteOutlined,\r\n  DownCircleOutlined,\r\n  HeartFilled,\r\n  HeartOutlined,\r\n  MoreOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"slices\";\r\nimport { IComment } from \"@typings/db\";\r\nimport useToggle from \"@hooks/useToggle\";\r\nimport NameSpace from \"@components/NameSpace\";\r\nimport { toastConfirmMessage } from \"@components/ConfirmToastify\";\r\nimport { toastErrorMessage, toastSuccessMessage } from \"config\";\r\nimport SubComment from \"../SubComment\";\r\nimport SubCommentForm from \"../SubCommentForm\";\r\nimport axios from \"axios\";\r\nimport { getUserInfoAction } from \"actions/user\";\r\ninterface IProps {\r\n  comment: IComment;\r\n  revalidateComments: () => Promise<boolean>;\r\n}\r\n\r\nconst Comment: FC<IProps> = ({ comment, revalidateComments }) => {\r\n  const dispatch = useDispatch();\r\n  const [onSubCommentForm, onChangeSubCommentForm, setSubCommentForm] = useToggle(false);\r\n  const [onSubCommentList, onChangeSubCommentList, setSubCommentList] = useToggle(true);\r\n  const { user } = useSelector((state: RootState) => state.user);\r\n  const [liked, setLiked] = useState(false);\r\n  const [isOwner, setIsOwner] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (user?.id === comment?.user.id) {\r\n      setIsOwner(true);\r\n    }\r\n    if (user) {\r\n      if (user.likeComment?.find((v: any) => v.commentId === comment?.id)) {\r\n        setLiked(true);\r\n      } else {\r\n        setLiked(false);\r\n      }\r\n    }\r\n  }, [user, comment]);\r\n  useEffect(() => {\r\n    if (comment?.subComments?.length > 2) {\r\n      setSubCommentList(false);\r\n    }\r\n  }, []);\r\n  const onClickConfirmDelete = useCallback(async () => {\r\n    if (user && isOwner) {\r\n      await axios\r\n        .delete(`/comment/${comment?.id}`)\r\n        .then(() => {\r\n          revalidateComments();\r\n          toastSuccessMessage(\"댓글을 성공적으로 삭제했습니다.\");\r\n        })\r\n        .catch((error) => {\r\n          toastErrorMessage(error);\r\n          throw error;\r\n        });\r\n    }\r\n  }, [user, isOwner, comment]);\r\n\r\n  const onClickLikeOrDisLike = useCallback(\r\n    (value: string) => {\r\n      if (!user) {\r\n        toastErrorMessage(\"로그인이 필요합니다.\");\r\n        return;\r\n      }\r\n      axios\r\n        .patch(`/comment/${value}/${comment?.id}`)\r\n        .then(() => {\r\n          if (value === \"like\") {\r\n            toastSuccessMessage(\"댓글 좋아요!💓\");\r\n          } else {\r\n            toastSuccessMessage(\"댓글 좋아요 취소💔\");\r\n          }\r\n          revalidateComments();\r\n          dispatch(getUserInfoAction());\r\n        })\r\n        .catch((error) => {\r\n          toastErrorMessage(error);\r\n          throw error;\r\n        });\r\n    },\r\n    [user, comment]\r\n  );\r\n  return (\r\n    <CommentWrapper>\r\n      <div onClick={onChangeSubCommentForm} className=\"comment-main\">\r\n        <NameSpace user={comment?.user} date={comment?.createdAt} comment={comment?.content} />\r\n        <div onClick={(e) => e.stopPropagation()} className=\"btn-wrapper\">\r\n          {liked ? (\r\n            <a className=\"liked\" onClick={() => onClickLikeOrDisLike(\"dislike\")}>\r\n              <HeartFilled />\r\n              <span className=\"count\">{comment?.likedUser?.length || 0}</span>\r\n            </a>\r\n          ) : (\r\n            <a onClick={() => onClickLikeOrDisLike(\"like\")}>\r\n              <HeartOutlined />\r\n              <span className=\"count\">{comment?.likedUser?.length || 0}</span>\r\n            </a>\r\n          )}\r\n          {isOwner && (\r\n            <a\r\n              onClick={() => {\r\n                toastConfirmMessage(onClickConfirmDelete, \"이 댓글을 삭제할까요?\", \"삭제해주세요.\");\r\n              }}\r\n            >\r\n              <DeleteOutlined />\r\n            </a>\r\n          )}\r\n        </div>\r\n      </div>\r\n      {onSubCommentForm && (\r\n        <SubCommentForm revalidateComments={revalidateComments} commentId={comment?.id} />\r\n      )}\r\n      {comment?.subComments?.length > 2 && (\r\n        <div onClick={onChangeSubCommentList} className=\"more-subComment\">\r\n          <button className=\"more-subComment-btn\">\r\n            <span className=\"count\">{comment?.subComments?.length}</span>\r\n            개의 답글\r\n            <DownCircleOutlined rotate={onSubCommentList ? 180 : 0} />\r\n          </button>\r\n        </div>\r\n      )}\r\n      {onSubCommentList &&\r\n        comment?.subComments?.map((v, i) => {\r\n          return <SubComment revalidateComments={revalidateComments} subComment={v} key={i} />;\r\n        })}\r\n    </CommentWrapper>\r\n  );\r\n};\r\n\r\nexport default memo(Comment);\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport default function useToggle(initialValue: Boolean) {\r\n  const [Value, setValue] = useState(initialValue);\r\n  const handler = useCallback(() => {\r\n    setValue((prev) => !prev);\r\n  }, []);\r\n  return [Value, handler, setValue] as const;\r\n}\r\n"],"names":["CommentFormWrapper","FLEX_STYLE","CommentForm","isStory","revalidateComments","dispatch","useDispatch","query","useRouter","user","useSelector","state","useInput","content","onChangeContent","setContent","useState","onCommentForm","setOnCommentForm","onSubmitComment","useCallback","trim","form","parseInt","storyId","momentId","axios","withCredentials","then","toastSuccessMessage","error","toastErrorMessage","onClickCommentCancle","onClickCommentForm","mainSlice","style","background","WHITE_COLOR","boxShadow","className","marginBottom","onClick","src","icon","DEFAULT_ICON_URL","alt","placeholder","disabled","value","onChange","memo","CommentWrapper","RED_COLOR","BLUE_COLOR","SubCommentWrapper","GRAY_COLOR","SubComment","subComment","isOwner","setIsOwner","useEffect","id","onClickConfirmDelete","NameSpace","date","createdAt","comment","toastConfirmMessage","DeleteOutlined","SubCommentFormWrapper","SubCommentForm","commentId","onSubmitSubComment","Comment","useToggle","onSubCommentForm","onChangeSubCommentForm","onSubCommentList","onChangeSubCommentList","setSubCommentList","liked","setLiked","likeComment","find","v","subComments","length","onClickLikeOrDisLike","getUserInfoAction","e","stopPropagation","HeartFilled","likedUser","HeartOutlined","DownCircleOutlined","rotate","map","i","initialValue","Value","setValue","prev"],"sourceRoot":""}