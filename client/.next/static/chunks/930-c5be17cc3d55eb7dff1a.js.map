{"version":3,"file":"static/chunks/930-c5be17cc3d55eb7dff1a.js","mappings":"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","sources":["webpack://_N_E/./components/AutoCompleteForm.tsx","webpack://_N_E/./components/ConfirmToastify.tsx","webpack://_N_E/./components/Editor/Editor.tsx","webpack://_N_E/./components/Editor/ImageDragger.tsx","webpack://_N_E/./components/Maps/CountrySelectMap.tsx","webpack://_N_E/./components/Maps/Pin.tsx","webpack://_N_E/./layout/LGLayout.tsx","webpack://_N_E/./utils/fetcher.ts"],"sourcesContent":["import React, { FC, useMemo } from \"react\";\r\nimport { AutoComplete } from \"antd\";\r\nimport { useCallback } from \"react\";\r\nimport { memo } from \"react\";\r\n\r\ninterface IProps {\r\n  countryOptions: { value: string; code: string }[] | undefined;\r\n  selectedCountry: string;\r\n  setCountry: (value: string) => void;\r\n  disabled?: boolean;\r\n}\r\n\r\nconst AutoCompleteForm: FC<IProps> = ({\r\n  countryOptions,\r\n  selectedCountry,\r\n  setCountry,\r\n  disabled,\r\n}) => {\r\n  const onChangeCountry = useCallback((value: string) => {\r\n    setCountry(value);\r\n  }, []);\r\n  return (\r\n    <AutoComplete\r\n      allowClear={true}\r\n      disabled={disabled}\r\n      className=\"autoComplete-form\"\r\n      options={\r\n        selectedCountry !== \"\"\r\n          ? countryOptions\r\n          : countryOptions?.slice(0, 8).concat([{ value: \"...\", code: \"\" }])\r\n      }\r\n      value={selectedCountry}\r\n      onChange={onChangeCountry}\r\n      placeholder=\"국가검색\"\r\n      filterOption={(inputValue, option) =>\r\n        option!.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default memo(AutoCompleteForm);\r\n","import { toast } from \"react-toastify\";\r\n\r\nconst ConfirmToastForm = ({\r\n  onClickConfirm,\r\n  closeToast,\r\n  message,\r\n  type,\r\n}: {\r\n  onClickConfirm: () => void;\r\n  closeToast?: any;\r\n  message: string;\r\n  type: string;\r\n}) => (\r\n  <div style={{ cursor: \"default\" }}>\r\n    <h4 style={{ marginLeft: \"0.3rem\" }}>{message}</h4>\r\n    <div className=\"confirm-btn-wrapper\">\r\n      <button\r\n        onClick={() => {\r\n          onClickConfirm();\r\n          closeToast();\r\n        }}\r\n      >\r\n        네 {type}\r\n      </button>\r\n      <button onClick={closeToast}>아니요</button>\r\n    </div>\r\n  </div>\r\n);\r\nexport const toastConfirmMessage = (onClickConfirm: () => void, message: string, type: string) => {\r\n  toast(<ConfirmToastForm onClickConfirm={onClickConfirm} message={message} type={type} />, {\r\n    position: \"top-center\",\r\n    hideProgressBar: true,\r\n    closeOnClick: false,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  });\r\n};\r\n","import styled from \"@emotion/styled\";\r\nimport { imageHandler, quillSetting } from \"config\";\r\nimport React, { FC, useEffect, useRef } from \"react\";\r\nimport { memo } from \"react\";\r\n\r\nconst EditorWrapper = styled.div`\r\n  .ql-editor {\r\n    padding: 1rem;\r\n    img {\r\n      width: 50%;\r\n    }\r\n  }\r\n`;\r\n\r\ninterface IProps {\r\n  setContent: (value: string) => void;\r\n  prevContent?: string;\r\n  isStory?: boolean;\r\n}\r\n\r\nconst Editor: FC<IProps> = ({ setContent, prevContent, isStory }) => {\r\n  const Quill = typeof window == \"object\" ? require(\"quill\") : () => false;\r\n  const quillElement = useRef<any>(null);\r\n  const quillInstance = useRef<any>(null);\r\n\r\n  useEffect(() => {\r\n    if (quillElement?.current) {\r\n      quillInstance.current = new Quill(quillElement?.current, quillSetting(false));\r\n    }\r\n\r\n    const quill = quillInstance?.current;\r\n\r\n    if (prevContent) {\r\n      quill.root.innerHTML = prevContent;\r\n    }\r\n    quill?.on(\"text-change\", () => {\r\n      onChangeEditor(quill?.root.innerHTML);\r\n    });\r\n\r\n    const toolbar = quill?.getModule(\"toolbar\");\r\n    toolbar.addHandler(\"image\", () => imageHandler(quillInstance, isStory));\r\n  }, []);\r\n\r\n  const onChangeEditor = (content: string) => {\r\n    setContent(content);\r\n  };\r\n\r\n  return (\r\n    <EditorWrapper>\r\n      <div style={{ height: \"70vh\" }} ref={quillElement} />\r\n    </EditorWrapper>\r\n  );\r\n};\r\n\r\nexport default memo(Editor);\r\n","import React, { FC, SetStateAction, useCallback, useEffect, useState } from \"react\";\r\nimport { Upload } from \"antd\";\r\nimport styled from \"@emotion/styled\";\r\nimport { RGB_BLACK } from \"config\";\r\nimport { memo } from \"react\";\r\nimport { IPrevImage } from \"@typings/db\";\r\nimport { UploadFile } from \"antd/lib/upload/interface\";\r\nconst { Dragger } = Upload;\r\nconst ImageDraggerWrapper = styled.div`\r\n  .dragger {\r\n    border-radius: 15px;\r\n    border: 1px solid ${RGB_BLACK(0.08)};\r\n    &:hover {\r\n      border: 1px solid ${RGB_BLACK(0.08)} !important;\r\n    }\r\n    img {\r\n      width: 5rem;\r\n    }\r\n  }\r\n  .ant-upload-list-item-list-type-picture {\r\n    border-radius: 10px;\r\n  }\r\n`;\r\n\r\ninterface IProps {\r\n  setUpImg: (value: any) => void;\r\n  single?: boolean;\r\n  fileList: UploadFile[];\r\n  setPrevImageList?: any;\r\n  setFileList: any;\r\n}\r\n\r\nconst ImageDragger: FC<IProps> = ({\r\n  setUpImg,\r\n  single,\r\n  fileList,\r\n  setPrevImageList,\r\n  setFileList,\r\n}) => {\r\n  const handleChange = useCallback(\r\n    (info: any) => {\r\n      setFileList(info.fileList);\r\n      if (info.file.status === \"done\") {\r\n        if (single) {\r\n          setUpImg(info.file.originFileObj);\r\n        } else {\r\n          setUpImg((prev: any) => [...prev, info.file.originFileObj]);\r\n        }\r\n      }\r\n      if (info.file.status === \"removed\") {\r\n        if (!info.file.originFileObj) {\r\n          setPrevImageList(\r\n            info.fileList\r\n              .filter((v: UploadFile) => {\r\n                return v.originFileObj === undefined;\r\n              })\r\n              .map((v: UploadFile) => {\r\n                return v.url;\r\n              })\r\n          );\r\n        }\r\n        if (single) {\r\n          setUpImg(null);\r\n        } else {\r\n          setUpImg(\r\n            info.fileList.filter((v: any) => {\r\n              return v.originFileObj !== undefined;\r\n            })\r\n          );\r\n        }\r\n      }\r\n    },\r\n    [single, fileList]\r\n  );\r\n\r\n  return (\r\n    <ImageDraggerWrapper>\r\n      <Dragger\r\n        showUploadList={true}\r\n        maxCount={single ? 1 : 5}\r\n        multiple={single ? false : true}\r\n        listType=\"picture\"\r\n        className=\"dragger\"\r\n        fileList={fileList || undefined}\r\n        onChange={handleChange}\r\n      >\r\n        <img\r\n          src=\"https://user-images.githubusercontent.com/74864925/124657825-f38a5500-dedd-11eb-8de9-6ed70a512f24.png\"\r\n          alt=\"drag\"\r\n        />\r\n        <h4>이미지 드래그 또는 선택</h4>\r\n      </Dragger>\r\n    </ImageDraggerWrapper>\r\n  );\r\n};\r\n\r\nexport default memo(ImageDragger);\r\n","import React, { FC, memo, useCallback, useRef, useState } from \"react\";\r\nimport ReactMapGL, { Marker, FlyToInterpolator, Source, Layer, MapRef } from \"react-map-gl\";\r\nimport Pin from \"./Pin\";\r\n//@ts-ignore\r\nimport Geocoder from \"react-map-gl-geocoder\";\r\nimport { ICoordinate } from \"@typings/db\";\r\n\r\ninterface IProps {\r\n  setRegion: (value: string) => void;\r\n  marker: ICoordinate;\r\n  setMarker: (coordinate: ICoordinate) => void;\r\n  lat: number | undefined;\r\n  lng: number | undefined;\r\n}\r\n\r\nconst CountrySelectMap: FC<IProps> = ({ setRegion, marker, setMarker, lat, lng }) => {\r\n  const mapRef = useRef<MapRef>(null);\r\n  const [viewport, setViewport] = useState({\r\n    width: \"100%\",\r\n    height: 500,\r\n    latitude: lat || 37.50529626491968,\r\n    longitude: lng || 126.98047832475031,\r\n    zoom: 8,\r\n  });\r\n\r\n  const handleViewportChange = useCallback((newViewport) => setViewport(newViewport), []);\r\n\r\n  const handleGeocoderViewportChange = useCallback(\r\n    (newViewport) => {\r\n      const geocoderDefaultOverrides = { transitionDuration: 1000 };\r\n      setMarker(newViewport);\r\n      return handleViewportChange({\r\n        width: \"100%\",\r\n        height: 500,\r\n        ...newViewport,\r\n        ...geocoderDefaultOverrides,\r\n      });\r\n    },\r\n    [handleViewportChange]\r\n  );\r\n\r\n  return (\r\n    <ReactMapGL\r\n      className=\"map-gl\"\r\n      ref={mapRef}\r\n      {...viewport}\r\n      mapboxApiAccessToken={process.env.NEXT_PUBLIC_MAPBOX_API_KEY}\r\n      onViewportChange={handleViewportChange}\r\n      mapStyle=\"mapbox://sprites/mapbox/basic-v8\"\r\n      asyncRender={true}\r\n      transitionInterpolator={new FlyToInterpolator()}\r\n    >\r\n      <Geocoder\r\n        marker={false}\r\n        mapRef={mapRef}\r\n        onViewportChange={handleGeocoderViewportChange}\r\n        mapboxApiAccessToken={process.env.NEXT_PUBLIC_MAPBOX_API_KEY}\r\n        position=\"top-left\"\r\n        onResult={(e: any) => {\r\n          const geocoderDefaultOverrides = { transitionDuration: 1000 };\r\n          setRegion(e.result.place_name);\r\n          handleViewportChange({\r\n            width: \"100%\",\r\n            height: 500,\r\n            zoom: 9.3,\r\n            latitude: e.result.center[1],\r\n            longitude: e.result.center[0],\r\n            ...geocoderDefaultOverrides,\r\n          });\r\n        }}\r\n      />\r\n      <Marker\r\n        longitude={marker.longitude}\r\n        latitude={marker.latitude}\r\n        offsetTop={-20}\r\n        offsetLeft={-10}\r\n      >\r\n        <Pin size={20} />\r\n      </Marker>\r\n    </ReactMapGL>\r\n  );\r\n};\r\n\r\nexport default memo(CountrySelectMap);\r\n","import styled from \"@emotion/styled\";\r\nimport { IStory } from \"@typings/db\";\r\nimport { Popover } from \"antd\";\r\nimport { NO_IMAGE_URL } from \"config\";\r\nimport router from \"next/router\";\r\nimport React, { FC, memo, useCallback, useState } from \"react\";\r\nimport tw from \"twin.macro\";\r\n\r\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\r\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\r\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\r\n\r\nconst pinStyle = {\r\n  fill: \"#d00\",\r\n  stroke: \"none\",\r\n};\r\ninterface IProps {\r\n  size: number;\r\n  story?: IStory;\r\n  isUserInfoPage?: boolean;\r\n}\r\n\r\nconst Pin: FC<IProps> = ({ size, story, isUserInfoPage }) => {\r\n  return (\r\n    <>\r\n      {isUserInfoPage ? (\r\n        <Popover\r\n          className=\"marker-popup\"\r\n          content={\r\n            <img\r\n              style={{ width: \"250px\", height: \"180px\" }}\r\n              src={story?.thumbnail || NO_IMAGE_URL}\r\n              alt=\"story_thumbnail\"\r\n            />\r\n          }\r\n          title={\r\n            <a\r\n              style={{ padding: \"0.5rem 0\" }}\r\n              onClick={() => router.push(`/story/${story?.code}/${story?.id}`)}\r\n            >\r\n              {story?.region}\r\n            </a>\r\n          }\r\n        >\r\n          <svg className=\"pin\" height={size} viewBox=\"0 0 24 24\" style={pinStyle}>\r\n            <path d={ICON} />\r\n          </svg>\r\n        </Popover>\r\n      ) : (\r\n        <svg className=\"pin\" height={size} viewBox=\"0 0 24 24\" style={pinStyle}>\r\n          <path d={ICON} />\r\n        </svg>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(Pin);\r\n","import React, { FC } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { GRAY_COLOR, LG_SIZE } from \"config\";\r\nimport tw from \"twin.macro\";\r\nconst LGLayoutWrapper = styled.main`\r\n  ${tw`pt-16`}\r\n  background-color: ${GRAY_COLOR};\r\n  .layout {\r\n    width: ${LG_SIZE};\r\n    ${tw`mx-auto py-8`}\r\n    .main-title {\r\n      ${tw`text-base font-bold mt-8 mb-4`}\r\n    }\r\n    .main-title:first-of-type {\r\n      ${tw`mt-0 mb-4`}\r\n    }\r\n    @media (max-width: ${LG_SIZE}) {\r\n      ${tw`w-full px-4 pt-8 pb-16`}\r\n    }\r\n  }\r\n`;\r\n\r\ninterface LGLayout {}\r\n\r\nconst LGLayout: FC<LGLayout> = ({ children }) => {\r\n  return (\r\n    <LGLayoutWrapper>\r\n      <div className=\"layout\">{children}</div>\r\n    </LGLayoutWrapper>\r\n  );\r\n};\r\n\r\nexport default LGLayout;\r\n","import axios from \"axios\";\n\nconst fetcher = (url: string) =>\n  axios\n    .get(url, {\n      withCredentials: true,\n    })\n    .then((response) => response.data.data);\n\nexport default fetcher;\n"],"names":["AutoCompleteForm","countryOptions","selectedCountry","setCountry","disabled","onChangeCountry","useCallback","value","allowClear","className","options","slice","concat","code","onChange","placeholder","filterOption","inputValue","option","toUpperCase","indexOf","memo","ConfirmToastForm","onClickConfirm","closeToast","message","type","style","cursor","marginLeft","onClick","toastConfirmMessage","toast","position","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","EditorWrapper","Editor","setContent","prevContent","isStory","Quill","require","quillElement","useRef","quillInstance","useEffect","current","quillSetting","quill","root","innerHTML","on","onChangeEditor","getModule","addHandler","imageHandler","content","height","ref","Dragger","Upload","ImageDraggerWrapper","RGB_BLACK","ImageDragger","setUpImg","single","fileList","setPrevImageList","setFileList","handleChange","info","file","status","originFileObj","prev","filter","v","map","url","showUploadList","maxCount","multiple","listType","src","alt","CountrySelectMap","setRegion","marker","setMarker","lat","lng","mapRef","useState","width","latitude","longitude","zoom","viewport","setViewport","handleViewportChange","newViewport","handleGeocoderViewportChange","transitionDuration","mapboxApiAccessToken","process","onViewportChange","mapStyle","asyncRender","transitionInterpolator","FlyToInterpolator","onResult","e","result","place_name","center","offsetTop","offsetLeft","size","ICON","pinStyle","fill","stroke","Pin","story","isUserInfoPage","thumbnail","NO_IMAGE_URL","title","padding","router","id","region","viewBox","d","LGLayoutWrapper","GRAY_COLOR","LG_SIZE","children","axios","withCredentials","then","response","data"],"sourceRoot":""}