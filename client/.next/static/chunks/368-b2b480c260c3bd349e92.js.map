{"version":3,"file":"static/chunks/368-b2b480c260c3bd349e92.js","mappings":"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","sources":["webpack://_N_E/./components/AutoCompleteForm.tsx","webpack://_N_E/./components/Editor/ImageDragger.tsx","webpack://_N_E/./sections/MainPage/MomentPostingForm/styles.tsx","webpack://_N_E/./sections/MainPage/MomentPostingForm/index.tsx","webpack://_N_E/./utils/fetcher.ts"],"sourcesContent":["import React, { FC, useMemo } from \"react\";\r\nimport { AutoComplete } from \"antd\";\r\nimport { useCallback } from \"react\";\r\nimport { memo } from \"react\";\r\n\r\ninterface IProps {\r\n  countryOptions: { value: string; code: string }[] | undefined;\r\n  selectedCountry: string;\r\n  setCountry: (value: string) => void;\r\n  disabled?: boolean;\r\n}\r\n\r\nconst AutoCompleteForm: FC<IProps> = ({\r\n  countryOptions,\r\n  selectedCountry,\r\n  setCountry,\r\n  disabled,\r\n}) => {\r\n  const onChangeCountry = useCallback((value: string) => {\r\n    setCountry(value);\r\n  }, []);\r\n  return (\r\n    <AutoComplete\r\n      allowClear={true}\r\n      disabled={disabled}\r\n      className=\"autoComplete-form\"\r\n      options={\r\n        selectedCountry !== \"\"\r\n          ? countryOptions\r\n          : countryOptions?.slice(0, 8).concat([{ value: \"...\", code: \"\" }])\r\n      }\r\n      value={selectedCountry}\r\n      onChange={onChangeCountry}\r\n      placeholder=\"국가검색\"\r\n      filterOption={(inputValue, option) =>\r\n        option!.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default memo(AutoCompleteForm);\r\n","import React, { FC, SetStateAction, useCallback, useEffect, useState } from \"react\";\r\nimport { Upload } from \"antd\";\r\nimport styled from \"@emotion/styled\";\r\nimport { RGB_BLACK } from \"config\";\r\nimport { memo } from \"react\";\r\nimport { IPrevImage } from \"@typings/db\";\r\nimport { UploadFile } from \"antd/lib/upload/interface\";\r\nconst { Dragger } = Upload;\r\nconst ImageDraggerWrapper = styled.div`\r\n  .dragger {\r\n    border-radius: 15px;\r\n    border: 1px solid ${RGB_BLACK(0.08)};\r\n    &:hover {\r\n      border: 1px solid ${RGB_BLACK(0.08)} !important;\r\n    }\r\n    img {\r\n      width: 5rem;\r\n    }\r\n  }\r\n  .ant-upload-list-item-list-type-picture {\r\n    border-radius: 10px;\r\n  }\r\n`;\r\n\r\ninterface IProps {\r\n  setUpImg: (value: any) => void;\r\n  single?: boolean;\r\n  fileList: UploadFile[];\r\n  setPrevImageList?: any;\r\n  setFileList: any;\r\n}\r\n\r\nconst ImageDragger: FC<IProps> = ({\r\n  setUpImg,\r\n  single,\r\n  fileList,\r\n  setPrevImageList,\r\n  setFileList,\r\n}) => {\r\n  const handleChange = useCallback(\r\n    (info: any) => {\r\n      setFileList(info.fileList);\r\n      if (info.file.status === \"done\") {\r\n        if (single) {\r\n          setUpImg(info.file.originFileObj);\r\n        } else {\r\n          setUpImg((prev: any) => [...prev, info.file.originFileObj]);\r\n        }\r\n      }\r\n      if (info.file.status === \"removed\") {\r\n        if (!info.file.originFileObj) {\r\n          setPrevImageList(\r\n            info.fileList\r\n              .filter((v: UploadFile) => {\r\n                return v.originFileObj === undefined;\r\n              })\r\n              .map((v: UploadFile) => {\r\n                return v.url;\r\n              })\r\n          );\r\n        }\r\n        if (single) {\r\n          setUpImg(null);\r\n        } else {\r\n          setUpImg(\r\n            info.fileList.filter((v: any) => {\r\n              return v.originFileObj !== undefined;\r\n            })\r\n          );\r\n        }\r\n      }\r\n    },\r\n    [single, fileList]\r\n  );\r\n\r\n  return (\r\n    <ImageDraggerWrapper>\r\n      <Dragger\r\n        showUploadList={true}\r\n        maxCount={single ? 1 : 5}\r\n        multiple={single ? false : true}\r\n        listType=\"picture\"\r\n        className=\"dragger\"\r\n        fileList={fileList || undefined}\r\n        onChange={handleChange}\r\n      >\r\n        <img\r\n          src=\"https://user-images.githubusercontent.com/74864925/124657825-f38a5500-dedd-11eb-8de9-6ed70a512f24.png\"\r\n          alt=\"drag\"\r\n        />\r\n        <h4>이미지 드래그 또는 선택</h4>\r\n      </Dragger>\r\n    </ImageDraggerWrapper>\r\n  );\r\n};\r\n\r\nexport default memo(ImageDragger);\r\n","import styled from \"@emotion/styled\";\r\nimport { BORDER_THIN, FLEX_STYLE, GRAY_COLOR, RGB_BLACK, SM_SIZE } from \"config\";\r\nimport tw from \"twin.macro\";\r\n\r\nexport const MomentPostingFormWrapper = styled.section`\r\n  ${tw`rounded-2xl bg-white p-2`}\r\n  .selector-wrapper {\r\n    ${FLEX_STYLE(\"flex-start\", \"center\")};\r\n    margin-bottom: 1rem;\r\n  }\r\n\r\n  .autoComplete-form {\r\n    margin-right: 1rem;\r\n    width: 200px;\r\n  }\r\n  .country-selector {\r\n    margin-right: 1rem;\r\n  }\r\n  .posting-form-preview {\r\n    ${tw`rounded-2xl cursor-pointer py-2 px-4`}\r\n    ${FLEX_STYLE(\"space-between\", \"center\")}\r\n    transition: 0.3s all;\r\n    .anticon {\r\n      ${tw`text-xl p-2`}\r\n      transition: 0.3s all;\r\n    }\r\n    &:hover {\r\n      background: ${GRAY_COLOR};\r\n      .anticon {\r\n        transform: scale(1.15);\r\n      }\r\n    }\r\n  }\r\n  .title-wrapper {\r\n    ${tw`m-4 rounded-2xl`}\r\n    ${BORDER_THIN(\"border\")};\r\n    input {\r\n      ${tw`py-3 px-4 rounded-2xl`}\r\n    }\r\n  }\r\n  .posting-editor {\r\n    padding: 1rem;\r\n    .editor-btn-wrapper {\r\n      margin-top: 1rem;\r\n      ${FLEX_STYLE(\"flex-end\", \"center\")}\r\n      button {\r\n        ${tw`py-3 px-5 font-bold rounded-xl hover:bg-gray-100`}\r\n      }\r\n    }\r\n  }\r\n  @media (max-width: ${SM_SIZE}) {\r\n    .posting-editor {\r\n      ${tw`p-2`}\r\n    }\r\n  }\r\n`;\r\n","import { EditOutlined } from \"@ant-design/icons\";\r\nimport ImageDragger from \"@components/Editor/ImageDragger\";\r\nimport { Select } from \"antd\";\r\nimport { noRevalidate, toastErrorMessage, toastSuccessMessage } from \"config\";\r\nimport React, { FC, memo, useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { MomentPostingFormWrapper } from \"./styles\";\r\nimport router, { useRouter } from \"next/router\";\r\nimport useSWR from \"swr\";\r\nimport fetcher from \"utils/fetcher\";\r\nimport { ICountry, IMoment, IPrevImage } from \"@typings/db\";\r\nimport AutoCompleteForm from \"@components/AutoCompleteForm\";\r\nimport { RootState } from \"slices\";\r\nimport dynamic from \"next/dynamic\";\r\nimport axios from \"axios\";\r\nimport { UploadFile } from \"antd/lib/upload/interface\";\r\nimport { mainSlice } from \"slices/main\";\r\nconst { Option } = Select;\r\n\r\nconst EditorWithoutImage = dynamic(import(\"@components/Editor/EditorWithoutImage\"));\r\n\r\ninterface IProps {\r\n  editMoment?: IMoment;\r\n}\r\n\r\nconst MomentPostingForm: FC<IProps> = ({ editMoment }) => {\r\n  const { query } = useRouter();\r\n  const dispatch = useDispatch();\r\n  const { data: countries } = useSWR<ICountry[]>(\"/country\", fetcher, noRevalidate);\r\n  const [upImg, setUpImg] = useState<File[]>([]);\r\n  const [content, setContent] = useState(\"\");\r\n  const [type, setType] = useState(\"키워드 선택\");\r\n  const [selectedCountry, setCountry] = useState(\"\");\r\n  const [prevImageList, setPrevImageList] = useState<string[]>([]);\r\n  const [fileList, setFileList] = useState<UploadFile[]>([]);\r\n  const [onPostingForm, setOnPostingForm] = useState(false);\r\n  const { user } = useSelector((state: RootState) => state.user);\r\n\r\n  useEffect(() => {\r\n    if (editMoment) {\r\n      setContent(editMoment?.content);\r\n      setType(editMoment?.type);\r\n      setCountry(editMoment?.country?.name);\r\n      if (editMoment?.images.length > 0) {\r\n        const editMomentImageList: UploadFile[] = editMoment.images.map((v, i) => {\r\n          return { uid: `${i + 1}`, name: `이미지 ${i + 1}번`, status: \"done\", url: v.image_src };\r\n        });\r\n        setFileList(editMomentImageList);\r\n        setPrevImageList(editMoment?.images.map((v) => v.image_src));\r\n      }\r\n    }\r\n  }, [editMoment]);\r\n\r\n  const countryOptions = useMemo(\r\n    () =>\r\n      countries?.map((v, i) => {\r\n        return { value: v.name, code: v.code };\r\n      }),\r\n    [countries]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (query?.code && countryOptions) {\r\n      let pickCountry = countryOptions?.find((v) => v.code === query?.code);\r\n      setCountry(pickCountry?.value as string);\r\n    }\r\n  }, [query, countryOptions]);\r\n\r\n  const onClickSubmit = useCallback(() => {\r\n    if (type === \"키워드 선택\") {\r\n      toastErrorMessage(\"키워드를 선택해주세요.\");\r\n      return;\r\n    }\r\n    if (!content) {\r\n      toastErrorMessage(\"내용을 작성해주세요.\");\r\n      return;\r\n    }\r\n    let form: FormData = new FormData();\r\n    upImg?.forEach((v) => {\r\n      form.append(\"image\", v);\r\n    });\r\n    prevImageList?.forEach((v) => {\r\n      form.append(\"prevImage\", v);\r\n    });\r\n    form.append(\"content\", String(content));\r\n    form.append(\"type\", String(type));\r\n\r\n    let pickCountry = countryOptions?.find((v) => v.value === selectedCountry);\r\n    if (pickCountry) {\r\n      form.append(\"code\", String(pickCountry.code));\r\n    } else {\r\n      toastErrorMessage(\"유효하지 않은 국가입니다. 다시 확인해주세요.\");\r\n      return;\r\n    }\r\n    if (editMoment) {\r\n      form.append(\"momentId\", String(editMoment?.id));\r\n    }\r\n    axios\r\n      .post(`/moment/${editMoment ? \"edit\" : \"\"}`, form)\r\n      .then((res) => {\r\n        const { momentId } = res.data.data;\r\n        router.push(`/country/${pickCountry?.code}/${momentId}`);\r\n        scrollTo({ top: 0 });\r\n        setContent(\"\");\r\n        setUpImg([]);\r\n        setType(\"키워드 선택\");\r\n        setOnPostingForm(false);\r\n        if (editMoment) {\r\n          toastSuccessMessage(\"모멘트를 수정했습니다.\");\r\n        } else {\r\n          toastSuccessMessage(\"모멘트를 성공적으로 작성했습니다.\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        toastErrorMessage(error);\r\n        throw error;\r\n      });\r\n  }, [upImg, content, type, selectedCountry, editMoment, prevImageList]);\r\n\r\n  const onClickOpenPostingForm = useCallback(() => {\r\n    if (!user) {\r\n      toastErrorMessage(\"로그인이 필요합니다.\");\r\n      dispatch(mainSlice.actions.toggleLoginModal());\r\n      return;\r\n    }\r\n    setOnPostingForm(true);\r\n  }, [user]);\r\n\r\n  const onClickPostingCancle = useCallback(() => {\r\n    if (editMoment) {\r\n      router.back();\r\n    } else {\r\n      setOnPostingForm(false);\r\n    }\r\n  }, [editMoment]);\r\n\r\n  const handleTypeChange = useCallback((value: string) => {\r\n    setType(value);\r\n  }, []);\r\n  return (\r\n    <MomentPostingFormWrapper>\r\n      {!onPostingForm && !editMoment && (\r\n        <div onClick={onClickOpenPostingForm} className=\"posting-form-preview\">\r\n          <span className=\"placeholder\">당신의 여행은 어땠나요?</span>\r\n          <a>\r\n            <EditOutlined />\r\n          </a>\r\n        </div>\r\n      )}\r\n      {(onPostingForm || editMoment) && (\r\n        <>\r\n          <div className=\"posting-editor\">\r\n            <div className=\"selector-wrapper\">\r\n              <AutoCompleteForm\r\n                countryOptions={countryOptions}\r\n                selectedCountry={selectedCountry}\r\n                setCountry={setCountry}\r\n                disabled={editMoment ? true : false}\r\n              />\r\n              <Select\r\n                className=\"type-selector\"\r\n                value={type}\r\n                onChange={handleTypeChange}\r\n                style={{ width: \"180px\" }}\r\n              >\r\n                <Option value=\"한인 커뮤니티\">한인 커뮤니티</Option>\r\n                <Option value=\"여행정보 공유\">여행정보 공유</Option>\r\n                <Option value=\"사기 경보\">사기 경보</Option>\r\n                <Option value=\"동행자 모집\">동행자 모집</Option>\r\n              </Select>\r\n            </div>\r\n            <EditorWithoutImage content={content} setContent={setContent} />{\" \"}\r\n            <ImageDragger\r\n              fileList={fileList}\r\n              setUpImg={setUpImg}\r\n              setFileList={setFileList}\r\n              setPrevImageList={setPrevImageList}\r\n            />\r\n            <div className=\"editor-btn-wrapper\">\r\n              <button onClick={onClickSubmit}>모멘트 올리기</button>\r\n              <button onClick={onClickPostingCancle}>취소</button>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n    </MomentPostingFormWrapper>\r\n  );\r\n};\r\n\r\nexport default memo(MomentPostingForm);\r\n","import axios from \"axios\";\n\nconst fetcher = (url: string) =>\n  axios\n    .get(url, {\n      withCredentials: true,\n    })\n    .then((response) => response.data.data);\n\nexport default fetcher;\n"],"names":["AutoCompleteForm","countryOptions","selectedCountry","setCountry","disabled","onChangeCountry","useCallback","value","allowClear","className","options","slice","concat","code","onChange","placeholder","filterOption","inputValue","option","toUpperCase","indexOf","memo","Dragger","Upload","ImageDraggerWrapper","RGB_BLACK","ImageDragger","setUpImg","single","fileList","setPrevImageList","setFileList","handleChange","info","file","status","originFileObj","prev","filter","v","undefined","map","url","showUploadList","maxCount","multiple","listType","src","alt","MomentPostingFormWrapper","FLEX_STYLE","GRAY_COLOR","BORDER_THIN","SM_SIZE","Option","Select","EditorWithoutImage","dynamic","MomentPostingForm","editMoment","query","useRouter","dispatch","useDispatch","countries","useSWR","fetcher","noRevalidate","data","useState","upImg","content","setContent","type","setType","prevImageList","onPostingForm","setOnPostingForm","user","useSelector","state","useEffect","country","name","images","length","editMomentImageList","i","uid","image_src","useMemo","pickCountry","find","onClickSubmit","form","FormData","forEach","append","String","id","axios","then","res","momentId","router","scrollTo","top","toastSuccessMessage","error","toastErrorMessage","onClickOpenPostingForm","mainSlice","onClickPostingCancle","handleTypeChange","onClick","EditOutlined","style","width","withCredentials","response"],"sourceRoot":""}