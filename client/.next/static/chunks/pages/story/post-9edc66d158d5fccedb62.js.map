{"version":3,"file":"static/chunks/pages/story/post-9edc66d158d5fccedb62.js","mappings":"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","sources":["webpack://_N_E/./pages/story/post.tsx","webpack://_N_E/?5c1b"],"sourcesContent":["import React, { FC, useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport LGLayout from \"@layout/LGLayout\";\r\nimport Editor from \"@components/Editor/Editor\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"slices\";\r\nimport {\r\n  BORDER_THIN,\r\n  FLEX_STYLE,\r\n  noRevalidate,\r\n  toastErrorMessage,\r\n  toastSuccessMessage,\r\n} from \"config\";\r\nimport router, { useRouter } from \"next/router\";\r\nimport CountrySelectMap from \"@components/Maps/CountrySelectMap\";\r\nimport AutoCompleteForm from \"@components/AutoCompleteForm\";\r\nimport useSWR from \"swr\";\r\nimport { ICoordinate, ICountry, IStory } from \"@typings/db\";\r\nimport fetcher from \"utils/fetcher\";\r\nimport ImageDragger from \"@components/Editor/ImageDragger\";\r\nimport useInput from \"@hooks/useInput\";\r\nimport { toastConfirmMessage } from \"@components/ConfirmToastify\";\r\nimport tw from \"twin.macro\";\r\nimport { getUserInfoAction } from \"actions/user\";\r\nimport axios from \"axios\";\r\nimport { wrapper } from \"configureStore\";\r\nimport { UploadFile } from \"antd/lib/upload/interface\";\r\n\r\nexport const StoryPostWrapper = styled.div`\r\n  .title-input {\r\n    padding: 0.63rem 1rem;\r\n  }\r\n  .autoComplete-form {\r\n    width: 20%;\r\n  }\r\n  .editor-btn-wrapper {\r\n    margin-top: 1rem;\r\n    ${FLEX_STYLE(\"flex-end\", \"center\")}\r\n    button {\r\n      ${tw`bg-white py-3 px-6 font-bold ml-2 rounded-xl hover:shadow-md`}\r\n      ${BORDER_THIN(\"border\")};\r\n      transition: 0.3s all;\r\n    }\r\n  }\r\n  .mapboxgl-ctrl-geocoder--button {\r\n    ${tw`rounded-full`}\r\n  }\r\n  .dragger {\r\n    height: 40vh;\r\n  }\r\n`;\r\ninterface IProps {}\r\n\r\nconst post: FC<IProps> = () => {\r\n  const { query } = useRouter();\r\n  const { user } = useSelector((state: RootState) => state.user);\r\n  const { data: countries } = useSWR<ICountry[]>(\"/country\", fetcher, noRevalidate);\r\n  const { data: editStory } = useSWR<IStory>(\r\n    query?.storyId ? `/story/${query?.code}/${query?.storyId}` : null,\r\n    fetcher,\r\n    noRevalidate\r\n  );\r\n  const [selectedCountry, setCountry] = useState(\"\");\r\n  const [title, onChangeTitle, setTitle] = useInput(\"\");\r\n  const [prevThumbnail, setPrevThumbnail] = useState<string>();\r\n  const [fileList, setFileList] = useState<UploadFile[]>([]);\r\n  const [region, setRegion] = useState(\"이름모를 어딘가\");\r\n  const [upImg, setUpImg] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n  const [marker, setMarker] = useState<ICoordinate>({\r\n    latitude: 37.50529626491968,\r\n    longitude: 126.98047832475031,\r\n  });\r\n\r\n  const countryOptions = useMemo(\r\n    () =>\r\n      countries?.map((v, i) => {\r\n        return { value: v.name, code: v.code };\r\n      }),\r\n    [countries]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (editStory) {\r\n      setRegion(editStory?.region);\r\n      setTitle(editStory?.title);\r\n      setContent(editStory?.content);\r\n      setCountry(editStory?.country?.name);\r\n      setMarker({\r\n        latitude: editStory?.lat,\r\n        longitude: editStory?.lng,\r\n      });\r\n      if (editStory?.thumbnail) {\r\n        setFileList([{ uid: `1`, name: `썸네일`, status: \"done\", url: editStory.thumbnail }]);\r\n        setPrevThumbnail(editStory.thumbnail);\r\n      }\r\n    }\r\n  }, [editStory]);\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      router.back();\r\n    }\r\n    if (editStory) {\r\n      if (user?.id !== editStory?.user?.id) {\r\n        router.back();\r\n      }\r\n    }\r\n  }, [user, editStory]);\r\n\r\n  const onClickSubmit = useCallback(() => {\r\n    if (!title) {\r\n      toastErrorMessage(\"제목을 작성해주세요.\");\r\n      return;\r\n    }\r\n    if (!region) {\r\n      toastErrorMessage(\"지도에서 지역을 선택해주세요.\");\r\n      return;\r\n    }\r\n    if (!content) {\r\n      toastErrorMessage(\"내용을 작성해주세요.\");\r\n      return;\r\n    }\r\n    let form: FormData = new FormData();\r\n    if (upImg) {\r\n      form.append(\"image\", upImg);\r\n    }\r\n    form.append(\"title\", String(title));\r\n    form.append(\"region\", String(region));\r\n    form.append(\"content\", String(content));\r\n    form.append(\"lat\", String(marker.latitude));\r\n    form.append(\"lng\", String(marker.longitude));\r\n\r\n    let pickCountry = countryOptions?.find((v) => v.value === selectedCountry);\r\n    if (pickCountry) {\r\n      form.append(\"code\", String(pickCountry.code));\r\n    } else {\r\n      toastErrorMessage(\"유효하지 않은 국가입니다. 다시 확인해주세요.\");\r\n      return;\r\n    }\r\n    if (editStory) {\r\n      form.append(\"storyId\", String(editStory?.id));\r\n    }\r\n    axios\r\n      .post(`/story/${editStory ? \"edit\" : \"\"}`, form)\r\n      .then((res) => {\r\n        const { storyId } = res.data.data;\r\n        router.push(`/story/${pickCountry?.code}/${storyId}`);\r\n        scrollTo({ top: 0 });\r\n        setRegion(\"\");\r\n        setUpImg(\"\");\r\n        setTitle(\"\");\r\n        setContent(\"\");\r\n        setCountry(\"\");\r\n        if (editStory) {\r\n          toastSuccessMessage(\"연대기를 수정했습니다.\");\r\n        } else {\r\n          toastSuccessMessage(\"연대기를 성공적으로 작성했습니다.\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        toastErrorMessage(error);\r\n        throw error;\r\n      });\r\n  }, [title, region, countryOptions, selectedCountry, content, upImg, marker, editStory]);\r\n\r\n  return (\r\n    <StoryPostWrapper>\r\n      <LGLayout>\r\n        <h2 className=\"main-title\">제목</h2>\r\n        <input\r\n          value={title}\r\n          onChange={onChangeTitle}\r\n          placeholder=\"연대기 제목 입력\"\r\n          className=\"basic-input title-input\"\r\n          type=\"text\"\r\n        />\r\n        <h2 className=\"main-title\">국가 지정</h2>\r\n        <AutoCompleteForm\r\n          countryOptions={countryOptions}\r\n          selectedCountry={selectedCountry}\r\n          setCountry={setCountry}\r\n        />\r\n        <h2 className=\"main-title\">지역 지정</h2>\r\n        <CountrySelectMap\r\n          lat={editStory?.lat}\r\n          lng={editStory?.lng}\r\n          marker={marker}\r\n          setMarker={setMarker}\r\n          setRegion={setRegion}\r\n        />\r\n        <h2 className=\"main-title\">선택 지역</h2>\r\n        <h3>{region}</h3>\r\n        <h2 className=\"main-title\">내용작성</h2>\r\n        <Editor prevContent={editStory?.content} setContent={setContent} isStory={true} />\r\n        <h2 className=\"main-title\">{editStory ? \"썸네일 변경\" : \"썸네일 업로드\"}</h2>\r\n        <ImageDragger\r\n          fileList={fileList}\r\n          setFileList={setFileList}\r\n          setPrevImageList={setPrevThumbnail}\r\n          setUpImg={setUpImg}\r\n          single={true}\r\n        />\r\n        <div className=\"editor-btn-wrapper\">\r\n          <button onClick={() => router.back()}>뒤로가기</button>\r\n          <button\r\n            onClick={() => {\r\n              if (\r\n                marker.latitude === 37.50529626491968 &&\r\n                marker.longitude === 126.98047832475031\r\n              ) {\r\n                toastConfirmMessage(\r\n                  onClickSubmit,\r\n                  \"지역 좌표를 입력하지 않으셨어요, 이상태로 진행할까요? (현재 좌표 : 대한민국 서울 , 이름모를 어딘가)\",\r\n                  \"진행해주세요\"\r\n                );\r\n              } else {\r\n                onClickSubmit();\r\n              }\r\n            }}\r\n          >\r\n            {editStory ? \"연대기 수정\" : \"연대기 업로드\"}\r\n          </button>\r\n        </div>\r\n      </LGLayout>\r\n    </StoryPostWrapper>\r\n  );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps((store) => async ({ req, query }) => {\r\n  const cookie = req ? req.headers.cookie : \"\";\r\n  axios.defaults.headers.Cookie = \"\";\r\n  if (req && cookie) {\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  await store.dispatch(getUserInfoAction());\r\n  return {\r\n    props: {},\r\n  };\r\n});\r\n\r\nexport default post;\r\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/story/post\",\n      function () {\n        return require(\"private-next-pages/story/post.tsx\");\n      }\n    ]);\n  "],"names":["StoryPostWrapper","FLEX_STYLE","BORDER_THIN","query","useRouter","user","useSelector","state","countries","useSWR","fetcher","noRevalidate","data","editStory","storyId","code","useState","selectedCountry","setCountry","useInput","title","onChangeTitle","setTitle","setPrevThumbnail","fileList","setFileList","region","setRegion","upImg","setUpImg","content","setContent","latitude","longitude","marker","setMarker","countryOptions","useMemo","map","v","i","value","name","useEffect","country","lat","lng","thumbnail","uid","status","url","router","id","onClickSubmit","useCallback","form","FormData","append","String","pickCountry","find","axios","then","res","scrollTo","top","toastSuccessMessage","error","toastErrorMessage","className","onChange","placeholder","type","prevContent","isStory","setPrevImageList","single","onClick","toastConfirmMessage","window","__NEXT_P","push"],"sourceRoot":""}