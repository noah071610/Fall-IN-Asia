{"version":3,"file":"static/chunks/pages/country/[code]/[momentId]-da3bb2ee697f195e386b.js","mappings":"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","sources":["webpack://_N_E/./components/ConfirmToastify.tsx","webpack://_N_E/./sections/MainPage/MomentPost/styles.tsx","webpack://_N_E/./sections/MainPage/MomentPostTitle/styles.tsx","webpack://_N_E/./sections/MainPage/MomentPostTitle/index.tsx","webpack://_N_E/./sections/MainPage/MomentPost/index.tsx","webpack://_N_E/./pages/country/[code]/[momentId]/index.tsx","webpack://_N_E/?9df0"],"sourcesContent":["import { toast } from \"react-toastify\";\r\n\r\nconst ConfirmToastForm = ({\r\n  onClickConfirm,\r\n  closeToast,\r\n  message,\r\n  type,\r\n}: {\r\n  onClickConfirm: () => void;\r\n  closeToast?: any;\r\n  message: string;\r\n  type: string;\r\n}) => (\r\n  <div style={{ cursor: \"default\" }}>\r\n    <h4 style={{ marginLeft: \"0.3rem\" }}>{message}</h4>\r\n    <div className=\"confirm-btn-wrapper\">\r\n      <button\r\n        onClick={() => {\r\n          onClickConfirm();\r\n          closeToast();\r\n        }}\r\n      >\r\n        네 {type}\r\n      </button>\r\n      <button onClick={closeToast}>아니요</button>\r\n    </div>\r\n  </div>\r\n);\r\nexport const toastConfirmMessage = (onClickConfirm: () => void, message: string, type: string) => {\r\n  toast(<ConfirmToastForm onClickConfirm={onClickConfirm} message={message} type={type} />, {\r\n    position: \"top-center\",\r\n    hideProgressBar: true,\r\n    closeOnClick: false,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  });\r\n};\r\n","import styled from \"@emotion/styled\";\r\nimport { RED_COLOR, SM_SIZE } from \"config\";\r\nimport tw from \"twin.macro\";\r\n\r\nexport const MomentPostWrapper = styled.section`\r\n  ${tw`mb-8 p-8 rounded-2xl bg-white`}\r\n  .image-wrapper {\r\n    ${tw`py-8 cursor-pointer rounded-xl`}\r\n    .ant-image {\r\n      ${tw`w-full`}\r\n      .ant-image-img {\r\n        ${tw`w-full rounded-xl `}\r\n        height: 450px;\r\n      }\r\n      .anticon {\r\n        font-size: 3rem;\r\n      }\r\n    }\r\n  }\r\n  .liked {\r\n    .anticon {\r\n      color: ${RED_COLOR};\r\n    }\r\n  }\r\n  .post-content {\r\n    ${tw`pt-8 pb-12`}\r\n    min-height: 200px;\r\n    img {\r\n      width: 70%;\r\n    }\r\n  }\r\n  .post-footer {\r\n    li {\r\n      ${tw`py-1 px-2 mr-1 cursor-pointer rounded-xl hover:bg-gray-100`}\r\n      .count {\r\n        margin: 0 0.3rem;\r\n      }\r\n      .anticon {\r\n        font-size: 1.2rem;\r\n      }\r\n    }\r\n  }\r\n  @media (max-width: ${SM_SIZE}) {\r\n    ${tw`py-4 px-2`}\r\n  }\r\n`;\r\n","import styled from \"@emotion/styled\";\r\nimport { BORDER_THIN, FLEX_STYLE } from \"config\";\r\nimport tw from \"twin.macro\";\r\n\r\nexport const MomentPostTitleWrapper = styled.div`\r\n  ${tw`pb-4`}\r\n  ${BORDER_THIN(\"border-bottom\")};\r\n  ${FLEX_STYLE(\"space-between\", \"flex-end\")};\r\n  .right-menu {\r\n    ${FLEX_STYLE(\"center\", \"flex-end\")};\r\n    a {\r\n      ${tw`p-1 rounded-full hover:bg-gray-100`}\r\n      border-radius: 50%;\r\n      .anticon {\r\n        font-size: 1.1rem;\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { FC, useCallback, useEffect, useState } from \"react\";\r\nimport { MomentPostTitleWrapper } from \"./styles\";\r\nimport { Divider } from \"antd\";\r\nimport { IMoment } from \"@typings/db\";\r\nimport { EditOutlined, DeleteOutlined } from \"@ant-design/icons\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"slices\";\r\nimport NameSpace from \"@components/NameSpace\";\r\nimport router from \"next/router\";\r\nimport { toastConfirmMessage } from \"@components/ConfirmToastify\";\r\nimport axios from \"axios\";\r\nimport { toastErrorMessage, toastSuccessMessage } from \"config\";\r\n\r\ninterface IProps {\r\n  moment: IMoment;\r\n}\r\n\r\nconst MomentPostTitle: FC<IProps> = ({ moment }) => {\r\n  const dispatch = useDispatch();\r\n  const [isOwner, setIsOwner] = useState(false);\r\n  const { user } = useSelector((state: RootState) => state.user);\r\n\r\n  useEffect(() => {\r\n    if (user?.id === moment?.user?.id) {\r\n      setIsOwner(true);\r\n    } else {\r\n      setIsOwner(false);\r\n    }\r\n  }, [user, moment]);\r\n\r\n  const onClickEditBtn = useCallback(() => {\r\n    if (user && isOwner) {\r\n      router.push(`/country/edit?code=${moment?.code}&momentId=${moment?.id}`);\r\n    }\r\n  }, [user, isOwner, moment]);\r\n  const onClickConfirmDelete = useCallback(() => {\r\n    if (user && isOwner) {\r\n      axios\r\n        .delete(`/moment/${moment?.id}`)\r\n        .then(() => {\r\n          toastSuccessMessage(\"모멘트를 성공적으로 삭제했습니다.\");\r\n          router.push(`/country/${moment?.code}`);\r\n        })\r\n        .catch((error) => {\r\n          toastErrorMessage(error);\r\n          throw error;\r\n        });\r\n    }\r\n  }, [user, isOwner, moment]);\r\n  return (\r\n    <MomentPostTitleWrapper>\r\n      <NameSpace user={moment?.user} date={moment?.createdAt} />\r\n      <div className=\"right-menu\">\r\n        {isOwner && (\r\n          <>\r\n            <li className=\"edit-btn\">\r\n              <a onClick={onClickEditBtn}>\r\n                <EditOutlined />\r\n              </a>\r\n            </li>\r\n            <Divider type=\"vertical\" />\r\n            <li className=\"delete-btn\">\r\n              <a\r\n                onClick={() =>\r\n                  toastConfirmMessage(\r\n                    onClickConfirmDelete,\r\n                    \"정말 이 모멘트를 삭제할까요?\",\r\n                    \"삭제해주세요.\"\r\n                  )\r\n                }\r\n              >\r\n                <DeleteOutlined />\r\n              </a>\r\n            </li>\r\n          </>\r\n        )}\r\n      </div>\r\n    </MomentPostTitleWrapper>\r\n  );\r\n};\r\n\r\nexport default MomentPostTitle;\r\n","import React, { FC, useCallback, useEffect, useState } from \"react\";\r\nimport { MomentPostWrapper } from \"./styles\";\r\nimport MomentPostTitle from \"@sections/MainPage/MomentPostTitle\";\r\nimport Comment from \"@components/Comments/Comment\";\r\nimport { IComment, IImage, IMoment } from \"@typings/db\";\r\nimport ReactHtmlParser from \"react-html-parser\";\r\nimport { CommentOutlined, HeartFilled, HeartOutlined, ZoomInOutlined } from \"@ant-design/icons\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"slices\";\r\nimport { noRevalidate, toastErrorMessage, toastSuccessMessage } from \"config\";\r\nimport { Image } from \"antd\";\r\nimport Slider from \"react-slick\";\r\nimport CommentForm from \"@components/Comments/CommentForm\";\r\nimport { NextArrow, PrevArrow } from \"@components/SliderArrow\";\r\nimport useSWR from \"swr\";\r\nimport fetcher from \"utils/fetcher\";\r\nimport axios from \"axios\";\r\nimport { getUserInfoAction } from \"actions/user\";\r\n\r\ninterface IProps {\r\n  moment: IMoment;\r\n  revalidateMoment: () => Promise<boolean>;\r\n}\r\n\r\nconst momentImageSettings = {\r\n  dots: false,\r\n  infinite: true,\r\n  slidesToShow: 1,\r\n  slidesToScroll: 1,\r\n  autoplay: false,\r\n  speed: 300,\r\n  nextArrow: <NextArrow />,\r\n  prevArrow: <PrevArrow />,\r\n};\r\n\r\nconst MomentPost: FC<IProps> = ({ moment, revalidateMoment }) => {\r\n  const dispatch = useDispatch();\r\n  const [liked, setLiked] = useState(false);\r\n  const { user } = useSelector((state: RootState) => state.user);\r\n  const { data: comments, revalidate: revalidateComments } = useSWR<IComment[]>(\r\n    `/comment/${moment?.id}?postType=moment`,\r\n    fetcher,\r\n    noRevalidate\r\n  );\r\n  useEffect(() => {\r\n    if (user) {\r\n      if (user.likeMoment?.find((v: any) => v.momentId === moment?.id)) {\r\n        setLiked(true);\r\n      } else {\r\n        setLiked(false);\r\n      }\r\n    }\r\n  }, [user, moment]);\r\n\r\n  const onClickLikeOrDisLike = useCallback(\r\n    (value: string) => {\r\n      if (!user) {\r\n        toastErrorMessage(\"로그인이 필요합니다.\");\r\n        return;\r\n      }\r\n      axios\r\n        .patch(`/moment/${value}/${moment?.id}`)\r\n        .then(() => {\r\n          if (value === \"like\") {\r\n            toastSuccessMessage(\"좋아요!💓\");\r\n          } else {\r\n            toastSuccessMessage(\"좋아요 취소💔\");\r\n          }\r\n          revalidateMoment();\r\n          dispatch(getUserInfoAction());\r\n        })\r\n        .catch((error) => {\r\n          toastErrorMessage(error);\r\n          throw error;\r\n        });\r\n    },\r\n    [user, moment]\r\n  );\r\n\r\n  return (\r\n    <MomentPostWrapper>\r\n      <MomentPostTitle moment={moment} />\r\n      {moment?.images.length > 0 && (\r\n        <div className=\"image-wrapper\">\r\n          <Image.PreviewGroup>\r\n            <Slider {...momentImageSettings}>\r\n              {moment?.images.map((v: IImage, i: number) => {\r\n                return (\r\n                  <Image\r\n                    key={i}\r\n                    preview={{ mask: <ZoomInOutlined /> }}\r\n                    src={v.image_src}\r\n                    alt=\"moment-image\"\r\n                  />\r\n                );\r\n              })}\r\n            </Slider>\r\n          </Image.PreviewGroup>\r\n        </div>\r\n      )}\r\n      <div className=\"post-content\">{ReactHtmlParser(moment?.content as string)}</div>\r\n      <ul className=\"post-footer\">\r\n        <li>\r\n          <CommentOutlined />\r\n          <span className=\"count\">{comments?.length}</span>\r\n          <span>댓글</span>\r\n        </li>\r\n        <li\r\n          onClick={\r\n            liked ? () => onClickLikeOrDisLike(\"dislike\") : () => onClickLikeOrDisLike(\"like\")\r\n          }\r\n          className={liked ? \"liked\" : \"\"}\r\n        >\r\n          {liked ? <HeartFilled /> : <HeartOutlined />}\r\n          <span className=\"count\">{moment?.likedUser?.length}</span>\r\n          <span>좋아요</span>\r\n        </li>\r\n      </ul>\r\n      <CommentForm revalidateComments={revalidateComments} isStory={false} />\r\n      {comments?.map((v, i) => {\r\n        return <Comment revalidateComments={revalidateComments} key={i} comment={v} />;\r\n      })}\r\n    </MomentPostWrapper>\r\n  );\r\n};\r\n\r\nexport default MomentPost;\r\n","import React, { FC, useEffect, useState } from \"react\";\r\nimport { wrapper } from \"configureStore\";\r\nimport axios from \"axios\";\r\nimport { getUserInfoAction } from \"actions/user\";\r\nimport { noRevalidate } from \"config\";\r\nimport MomentList from \"@sections/MainPage/MomentList\";\r\nimport MomentPostingForm from \"@sections/MainPage/MomentPostingForm\";\r\nimport MommentPost from \"@sections/MainPage/MomentPost\";\r\nimport MainLayout from \"@layout/MainLayout\";\r\nimport MainTopArticleSlide from \"@sections/MainPage/MainPopularArticleSlide\";\r\nimport useSWR, { useSWRInfinite } from \"swr\";\r\nimport fetcher from \"utils/fetcher\";\r\nimport { useRouter } from \"next/router\";\r\nimport { ICountry, IMoment } from \"@typings/db\";\r\nimport Head from \"next/head\";\r\n\r\ninterface IProps {\r\n  initialMoments: IMoment[][];\r\n  initialMoment: IMoment;\r\n  initialCountry: ICountry;\r\n}\r\n\r\nconst index: FC<IProps> = ({ initialMoments, initialCountry, initialMoment }) => {\r\n  const { query } = useRouter();\r\n  const [uuid, setUUID] = useState(\"\");\r\n  const [filter, setFilter] = useState(\"\");\r\n  const { data: moment, revalidate: revalidateMoment } = useSWR<IMoment>(\r\n    `/moment/${query?.code}/${query?.momentId}?uuid=${uuid}`,\r\n    fetcher,\r\n    {\r\n      initialData: initialMoment,\r\n      ...noRevalidate,\r\n    }\r\n  );\r\n  const {\r\n    data: moments,\r\n    revalidate: revalidateMoments,\r\n    setSize,\r\n  } = useSWRInfinite<IMoment[]>(\r\n    (index) =>\r\n      `/moment?code=${query?.code || \"\"}&page=${index + 1}&filter=${filter}&type=${\r\n        query?.type || \"\"\r\n      }`,\r\n    fetcher,\r\n    {\r\n      initialData: initialMoments,\r\n      ...noRevalidate,\r\n    }\r\n  );\r\n  const { data: country } = useSWR<ICountry>(`/country/${query?.code}`, fetcher, {\r\n    initialData: initialCountry,\r\n    ...noRevalidate,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"client_identifier\")) {\r\n      setUUID(localStorage.getItem(\"client_identifier\")!);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>\r\n          {moment?.country?.name}/{moment?.id}번모멘트 - Fall IN Asia\r\n        </title>\r\n      </Head>\r\n      <MainLayout>\r\n        {moment && <MommentPost revalidateMoment={revalidateMoment} moment={moment} />}\r\n        <h2 className=\"main-title\">{country?.name} 인기 연대기</h2>\r\n        <MainTopArticleSlide country={country} />\r\n        <h2 className=\"main-title\">포스팅</h2>\r\n        <MomentPostingForm />\r\n        <MomentList\r\n          revalidateMoments={revalidateMoments}\r\n          filter={filter}\r\n          setFilter={setFilter}\r\n          setSize={setSize}\r\n          moments={moments}\r\n        />\r\n      </MainLayout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(\r\n  (store) =>\r\n    async ({ req, res, params }) => {\r\n      const cookie = req ? req.headers.cookie : \"\";\r\n      axios.defaults.headers.Cookie = \"\";\r\n      if (req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n      }\r\n      await store.dispatch(getUserInfoAction());\r\n      const initialMoment = await fetcher(`/moment/${params?.code}/${params?.momentId}`);\r\n      let initialMoments = await fetcher(`/moment?code=${params?.code}&page=1`);\r\n      initialMoments = [initialMoments];\r\n      const initialCountry = await fetcher(`/country/${params?.code}`);\r\n      return {\r\n        props: { initialMoment, initialMoments, initialCountry },\r\n      };\r\n    }\r\n);\r\n\r\nexport default index;\r\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/country/[code]/[momentId]\",\n      function () {\n        return require(\"private-next-pages/country/[code]/[momentId]/index.tsx\");\n      }\n    ]);\n  "],"names":["ConfirmToastForm","onClickConfirm","closeToast","message","type","style","cursor","marginLeft","className","onClick","toastConfirmMessage","toast","position","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","MomentPostWrapper","RED_COLOR","SM_SIZE","MomentPostTitleWrapper","BORDER_THIN","FLEX_STYLE","moment","useDispatch","useState","isOwner","setIsOwner","user","useSelector","state","useEffect","id","onClickEditBtn","useCallback","router","code","onClickConfirmDelete","axios","then","toastSuccessMessage","error","toastErrorMessage","NameSpace","date","createdAt","EditOutlined","DeleteOutlined","momentImageSettings","dots","infinite","slidesToShow","slidesToScroll","autoplay","speed","nextArrow","prevArrow","revalidateMoment","dispatch","liked","setLiked","useSWR","fetcher","noRevalidate","comments","data","revalidateComments","revalidate","likeMoment","find","v","momentId","onClickLikeOrDisLike","value","getUserInfoAction","images","length","map","i","preview","mask","ZoomInOutlined","Z","src","image_src","alt","ReactHtmlParser","content","CommentOutlined","HeartFilled","HeartOutlined","likedUser","CommentForm","isStory","Comment","comment","initialMoments","initialCountry","initialMoment","query","useRouter","uuid","setUUID","filter","setFilter","initialData","useSWRInfinite","index","moments","revalidateMoments","setSize","country","localStorage","getItem","name","MainLayout","MomentPostingForm","MomentList","window","__NEXT_P","push"],"sourceRoot":""}